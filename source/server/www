#!/usr/bin/env node

/**
 * Module dependencies
 */

const http = require('http');
const os = require('os');
const app = require('./app');
const config = require('../../config/config');
const pkg = require('../../package.json');

const STD_CONSOLE_LOG = console.log;
const STD_CONSOLE_ERR = console.error;

app.set('port', config.port);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = (typeof config.port === 'string')
    ? `Pipe ${config.port}` : `Port ${config.port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      STD_CONSOLE_ERR(`${bind} requires elevated privileges.`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      STD_CONSOLE_ERR(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      STD_CONSOLE_ERR(`${error.code} error!`);
      throw error;
  }
}

/**
 * Create HTTP server.
 */
function startServer() {
  const server = http.createServer(app);
  server.listen(config.port, () => {
    STD_CONSOLE_LOG(`HTTP server is listening on port ${config.port}`);
  });
  // No timeout by default
  server.timeout = 2147483646;
  server.on('error', onError);
}

/**
 * Print the information for bootup
 */
/* eslint-disable max-len */
function printBootupInfo() {
  STD_CONSOLE_LOG(`CPUs: ${os.cpus().length} thread size should be: ${Math.ceil(Math.max(4, os.cpus().length * 1.5))}`);
  STD_CONSOLE_LOG(`Node Uploader v${pkg.version} Date: ${new Date()} Node.js ${process.version} server started on ${os.hostname()}:${config.port}`);
}

startServer();
printBootupInfo();
